<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpriteLibrary</name>
    </assembly>
    <members>
        <member name="T:SpriteLibrary.KeyMessageFilter">
            <summary>
            This is a system that can be used to find any keypress on a form.
            You want to define a variable on your form, something like:
               private KeyMessageFilter the_filter = new KeyMessageFilter();
            When the form loads, set the filter with:
               Application.AddMessageFilter(the_filter);
              
            And then, to use it, do something like:
              bool Up = m_filter.IsKeyPressed(Keys.W);
              bool Down = m_filter.IsKeyPressed(Keys.S);
              This code was found here: http://stackoverflow.com/questions/1100285/how-to-detect-the-currently-pressed-key
            </summary>
        </member>
        <member name="T:SpriteLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Properties.Resources.ChangeLog">
             <summary>
               Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
            {\colortbl ;\red0\green0\blue255;}
            {\*\generator Riched20 10.0.10586}\viewkind4\uc1 
            \pard\sa200\sl276\slmult1\f0\fs22\lang9 This is the Running Demo, which was created to test out the SpriteController: {{\field{\*\fldinst{HYPERLINK http://www.codeproject.com/Articles/1085446/Using-Sprites-Inside-Windows-Forms }}{\fldrslt{http://www.codeproject.com/Articles/1085446/Using-Sprites-Inside-Windows-Forms\ul0\cf0}}}}\f0 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:SpriteLibrary.AnimationSingleFrame">
            <summary>
            A single frame of an animation
            </summary>
        </member>
        <member name="T:SpriteLibrary.Animation">
            <summary>
            One animation.  A series of images.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Animation.#ctor(System.Drawing.Point,SpriteLibrary.SmartImage,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an image from an image that has a bunch of frames in the one image.
            Start at the specified position (Start), and grab Count items (if we can find them)
            </summary>
            <param name="Count">The number of frames to grab</param>
            <param name="Start">A point in the image where we start capturing frames</param>
            <param name="Smart_Image">The smart image this is part of</param>
            <param name="SpriteImage">the image we use for the sprite.  Should have lots of images as a part of it.</param>
            <param name="width">the width of each frame</param>
            <param name="height">the height of each frame</param>
            <param name="duration">The duration in miliseconds for this frame</param>
        </member>
        <member name="M:SpriteLibrary.Animation.#ctor(SpriteLibrary.SmartImage,System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an image from an image that has a bunch of frames in the one image.
            Start at (0,0) with the specified height and width.  Pull out as many images as we can
            </summary>
            <param name="Smart_Image">The smart image this is part of</param>
            <param name="SpriteImage">the image we use for the sprite.  Should have lots of images as a part of it.</param>
            <param name="width">the width of each frame</param>
            <param name="height">the height of each frame</param>
            <param name="duration">The duration in miliseconds for this frame</param>
        </member>
        <member name="T:SpriteLibrary.SmartImage">
            <summary>
            This is the holder and parser for images within the AnimatedSprite world
            It allows you to store and access animations.  A smart image might be a "troll"
            that has a series of animations for up, down, left, right, and die.
            </summary>
        </member>
        <member name="M:SpriteLibrary.SmartImage.#ctor(SpriteLibrary.SpriteController,System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make an animated image from an image that contains multiple frames
            </summary>
            <param name="Controller">The sprite controller this is attached to</param>
            <param name="SpriteImage">The image we use to draw the animation from</param>
            <param name="width">The width of the image to cut out of the main image</param>
            <param name="height">The height of the image to cut out of the main image</param>
            <param name="duration">The duration in miliseconds</param>
        </member>
        <member name="M:SpriteLibrary.SmartImage.NeedsNewImage(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Return true if the specified animation and frame for that animation needs
            to be changed due to the time passing.
            </summary>
            <param name="animation">The animation index</param>
            <param name="frame">the frame index</param>
            <param name="duration">The time that has passed since the last frame was displayed.</param>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.SmartImage.AnimationDone(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check to see if the animation is in the last frame.  Only works if animateonce is set to true
            </summary>
            <param name="AnimateOnce">The animateOnce value of the sprite</param>
            <param name="animation">The animation we think we are on</param>
            <param name="frame">The frame we think we are on</param>
            <returns></returns>
        </member>
        <member name="T:SpriteLibrary.SpriteEventArgs">
            <summary>
            An EventArgs that contains information about Sprites.  Most of the Sprite events use
            this SpriteEventArgs.
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteEventArgs.TargetSprite">
            <summary>
            If another Sprite is involved in the event (Collision), than that Sprite is included here.
            It will be null if no other Sprite is involved.
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteEventArgs.CollisionMethod">
            <summary>
            The CollisionMethod used in the event.  Currently, only rectangle collisions are used
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteEventArgs.NewLocation">
            <summary>
            For the CheckBeforeMove event, newlocation will be the location the sprite is trying
            to move to. You can adjust the point (move it left, right, up, down) and it will affect
            the placement of the sprite.
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteEventArgs.Cancel">
            <summary>
            Used primarily in the CheckBeforeMove event.  If you set cancel to true, then the move fails.
            You can use this to keep a Sprite from going places where it ought not to go.
            </summary>
        </member>
        <member name="T:SpriteLibrary.Sprite">
            <summary>
            A Sprite is an animated image that has a size, position, rotation, and possible vector
            It tracks where in the animation sequence it is, can report colisions, etc.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.ID">
            <summary>
            The Sprite ID as specified by the sprite controller.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.SpriteName">
            <summary>
            The name of the sprite.  Use SetSpriteName(Name) to change this name.  Most Named sprites
            are used to define what a sprite is.  Once you have created a named sprite, you usually use
            SpriteController.DuplicateSprite(Name) to clone the sprite for use.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.SpriteOriginName">
            <summary>
            Return the name of the sprite that this was duplicated from.  A duplicated sprite will have
            no name, but will have a SpriteOriginName.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.FrameIndex">
            <summary>
            This is the frame of the current animation sequence.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.AnimationDone">
            <summary>
            Report whether or not the animation has been completed.  When you tell a Sprite to AnimateOnce,
            this will report "false" until the animation sequence has been finished.  At that time, the value
            will be "True"
            </summary>
        </member>
        <member name="F:SpriteLibrary.Sprite.MovementSpeed">
            <summary>
            The movement speed of the sprite.  To make a Sprite move, you need to set the MovementSpeed,
            the direction (using SetSpriteDirection), and the AutomaticallyMoves property.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.MovingToPoint">
            <summary>
            Tells us if we are in the process of doing a MoveTo operation.  This boolean should be the 
            opposite of SpriteReachedEndpoint, but that boolean is poorly named.  This is usually the easier
            one to use.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.AutomaticallyMoves">
            <summary>
            Determine if the sprite automatically moves (you need to give it a direction [using one of the
            SetSpriteDirection functions] and speed [MovementSpeed = X] also)
            </summary>     
        </member>
        <member name="P:SpriteLibrary.Sprite.Zvalue">
            <summary>
            A number from 0 to 100.  Default = 50. Higher numbers print on top of lower numbers.  If you want a sprite to 
            always be drawn on top of other sprites, give it a number higher than 50.  If you want a sprite to go under 
            other sprites, make its number lower than 50.
            </summary>
        </member>
        <member name="F:SpriteLibrary.Sprite.CannotMoveOutsideBox">
            <summary>
            Determine if the sprite will automatically move outside the box.  If not, it will hit the side of the box and stick
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.AnimationIndex">
            <summary>
            Get or set the animation frame.  It is best to change the animation using ChangeAnimation.
            It is safer.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.HasBeenDrawn">
            <summary>
            Report whether or not this Sprite has been drawn.  If it has, then it needs to be erased at
            some point in time.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.BaseImageLocation">
            <summary>
            The sprite location as found on the base image.  This is usually the easiest location to use.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.PictureBoxLocation">
            <summary>
            The sprite location as found on the picture-box that this sprite is associated with.  Used when dealing with mouse-clicks
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.GetSize">
            <summary>
            Return the size of the sprite in reference to the image on which it is drawn.  To get the
            size of the Sprite in relation to the PictureBox, use GetVisibleSize
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.GetVisibleSize">
            <summary>
            Return the relative size of the Sprite in relation to the PictureBox.  If the box has been 
            stretched or shrunk, that affects the visible size of the sprite.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.Rotation">
            <summary>
            Change the rotation of the sprite, using degrees.  0 degrees is to the right.  90 is up.  
            180 left, 270 down.  But, if your sprite was drawn facing up, then rotating it 90 degrees
            will have it pointing left.  The angle goes counter-clockwise.  The image will be scaled
            such that it continues to fit within the rectangle that it was originally in.  This results
            in a little bit of shrinking at times, but you should rarely notice that.
            </summary>
        </member>
        <member name="F:SpriteLibrary.Sprite.MirrorHorizontally">
            <summary>
            Flip the image when it gets printed.  If your sprite is walking left, flipping it will
            make it look like it is going right.
            </summary>
        </member>
        <member name="F:SpriteLibrary.Sprite.MirrorVertically">
            <summary>
            Flip the image when it gets printed.  If your sprite looks like it is facing up, doing 
            this will make it look like it faces down.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.Destroying">
            <summary>
            If the Sprite is in the middle of being Destroyed, this is set to true.  When a Sprite is
            Destroyed, it needs to erase itself and do some house-cleaning before it actually vanishes.
            During this time, you may not want to use it.  It is always a good thing to verify a Sprite
            is not in the middle of being destroyed before you do something important with it.  To Destroy
            a Sprite, use the Sprite.Destroy() function.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.SpriteReachedEndPoint">
            <summary>
            This is true unless we are using MoveTo(point) or MoveTo(list of points) to tell the sprite to move
            from one place to the next.  This boolean tells us if it has finished or not.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.VisibleHeight">
            <summary>
            The visible Height as seen in the PictureBox.  It may be stretched, or shrunk from the actual
            image size.
            </summary>
        </member>
        <member name="P:SpriteLibrary.Sprite.VisibleWidth">
            <summary>
            The visible width as seen in the PictureBox.  The Sprite may be stretched or shrunk from the
            actual image size.
            </summary>
        </member>
        <member name="F:SpriteLibrary.Sprite.payload">
            <summary>
            A Sprite can hold a payload.  Use this to store extra information about the various Sprites.  Health, Armor,
            Shoot time, etc.  But, to store information in the payload, you need to make a new class of SpritePayload.  The syntax
            for doing so is: public class TankPayload : SpritePayload {  public int Armor; public int Speed; }
            You can access the payload and retrieve the various values.  
            </summary>
        </member>
        <member name="T:SpriteLibrary.Sprite.SpriteEventHandler">
            <summary>
            Here we invent a delegate that has a SpriteEventArgs instead of EventArgs.  Used for most
            of the Sprite events
            </summary>
            <param name="sender">The Sprite that triggers the event</param>
            <param name="e">A SpriteEventArgs class which contains Sprite Event values</param>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteInitializes">
            <summary>
            This event happens right after the sprite is created.  Use this to immediately set a 
            sprite to animate once or something like that.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteHitsPictureBox">
            <summary>
            This happens when the sprite hits the border of the picture-box.  
            Useful for when you want to have shots explode when they hit the side.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteExitsPictureBox">
            <summary>
            This happens when the sprite has exited the picture box.  Useful when you want to 
            keep sprites from traveling on forever after exiting.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteAnimationComplete">
            <summary>
            Only used when you tell an animation to animate once.  At the end of the animation, 
            this function fires off.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteHitsSprite">
            <summary>
            This happens when two sprites hit each-other.  The SpriteEventArgs that is returned 
            contains the sprite that this sprite hits.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.CheckBeforeMove">
            <summary>
            This event fires off before a sprite is drawn. Use it if you have constraints.  You 
            can change the location or cancel the move entirely.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.Click">
            <summary>
            This event happens when someone clicks on the sprite (on the rectangle in which the sprite is).
            If you want the event to fire off only when someone clicks on the visible part of the sprite,
            use ClickTransparent instead.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.ClickTransparent">
            <summary>
            This event happens when someone clicks on the sprite (on the sprite image itself).
            If the sprite is sometimes hidden, but you want the click to work even if it is not
            visible at that instant, use Click instead.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteChangesAnimationFrames">
            <summary>
            When the frame of an animation changes.  If you want to have something happen every time
            the foot of your monster comes down, when the swing of your sword is at certain points, etc.
            Check to see that the Animaton and FrameIndex are what you expect them to be.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteArrivedAtEndPoint">
            <summary>
            An event for when you tell a Sprite to MoveTo(Point) a specific point, or, when you 
            tell the Sprite to MoveTo(list of points).  When the Sprite has reached the final destination,
            the Sprite fires off this event.
            </summary>
        </member>
        <member name="E:SpriteLibrary.Sprite.SpriteArrivedAtWaypoint">
            <summary>
            When you tell a sprite to MoveTo(list of points), this fires off every time it gets to
            one of the points.  When it gets to the final point, only the SpriteAtEndPoint event fires off.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.#ctor(SpriteLibrary.SpriteController,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Generate a new sprite.  It takes the image and the width and height.  If there are multiple images of that width and height in the image, an animation is created.
            </summary>
            <param name="Controller">The sprite controller that manages this sprite</param>
            <param name="SpriteImage">The image we pull the animation from</param>
            <param name="width">The width of one animation frame</param>
            <param name="height">The height of one animation frame</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.#ctor(SpriteLibrary.SpriteController,System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a new sprite.  It takes a width, height, and the duration in Milliseconds for each frame
            </summary>
            <param name="Controller">The sprite controller</param>
            <param name="SpriteImage">The image we pull the animations from</param>
            <param name="width">The width of one animation frame</param>
            <param name="height">the height of one animation frame</param>
            <param name="durationInMilliseconds">The number of milliseconds each frame is shown for as it animates.</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.#ctor(System.Drawing.Point,SpriteLibrary.SpriteController,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a Sprite from an animation image, specifying the number of consecutive 
            frames to grab.
            </summary>
            <param name="Start">A point on the specified image where we begin grabbing frames</param>
            <param name="Controller">The Sprite controller we are associating the sprite with</param>
            <param name="SpriteImage">An image that we grab the frames from</param>
            <param name="width">The width of one frame</param>
            <param name="height">The height of one frame</param>
            <param name="duration">The number of milliseconds each frame is displayed for</param>
            <param name="Count">The number of frames to grab as a part of this animation</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.#ctor(SpriteLibrary.Sprite,System.Boolean)">
            <summary>
            Create a Sprite that is based off of the specified sprite.  Clone the Sprite except that
            we set SpriteName = "" and OrigSpriteName = the OldSprite.SpriteName.  That way we know that
            the sprite was duplicated from the original, and we can still distinguish the original from
            the duplicate.
            </summary>
            <param name="OldSprite">The Sprite to make a copy of</param>
            <param name="RetainName">If we want to set this sprite name to be that of the original.  This is a terrible idea.  Never do it.</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.SetName(System.String)">
            <summary>
            Give this sprite a name.  This way we can make a duplicate of it by specifying the name
            </summary>
            <param name="Name">A string that represents the new name of the sprite</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.AddAnimation(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Add another animation to an existing Sprite.  After you add animations, you can use
            ChangeAnimation to select which animation you want the specified sprite to show.
            For example, you may want to have Animation 0 be a guy walking left, and animation 1 is
            that same guy walking right.  Because we do not specify the number of frames, it starts
            at the top-left corner and grabs as many frames as it can from the image.
            </summary>
            <param name="SpriteImage">The animation image to grab the frames from</param>
            <param name="width">The width of each frame</param>
            <param name="height">The height of each frame</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.AddAnimation(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add another animation to an existing Sprite.  After you add animations, you can use
            ChangeAnimation to select which animation you want the specified sprite to show.
            For example, you may want to have Animation 0 be a guy walking left, and animation 1 is
            that same guy walking right. Because we do not specify the number of frames, it starts
            at the top-left corner and grabs as many frames as it can from the image.
            </summary>
            <param name="SpriteImage">The animation image to grab the frames from</param>
            <param name="width">The width of each frame</param>
            <param name="height">The height of each frame</param>
            <param name="duration">The time in milliseconds we use for each frame</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.AddAnimation(System.Drawing.Point,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add another animation to an existing Sprite.  After you add animations, you can use
            ChangeAnimation to select which animation you want the specified sprite to show.
            For example, you may want to have Animation 0 be a guy walking left, and animation 1 is
            that same guy walking right. Because we do not specify the number of frames, it starts
            at the top-left corner and grabs as many frames as it can from the image.
            </summary>
            <param name="SpriteImage">The animation image to grab the frames from</param>
            <param name="width">The width of each frame</param>
            <param name="height">The height of each frame</param>
            <param name="duration">The time in milliseconds we use for each frame</param>
            <param name="Count">The number of frames we grab</param>
            <param name="Start">The starting position on the Image where we grab the first frame</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.AnimateOnce(System.Int32)">
            <summary>
            Start a new animation, but do it just once.  You can use AnimateJustAFewTimes(1) to the same effect.
            Or, you can use AnimateJustAFewTimes with a different number.  The SpriteAnimationComplete event will
            fire off when the animation completes.  The variable, Sprite.AnimationDone will be true once the 
            animation finishes animating.
            </summary>
            <param name="WhichAnimation"></param>
        </member>
        <member name="M:SpriteLibrary.Sprite.AnimateJustAFewTimes(System.Int32,System.Int32)">
            <summary>
            Start a new animation.  It will complete the animation the number of times you specify.
            For example, if your sprite is walking, and one animation is one step, specifying 4 here
            will result in your sprite taking 4 steps and then the animation stops.  You will want
            to make sure you are checking for when the animation stops, using the SpriteAnimationComplete event,
            checking the Sprite.AnimationDone flag.
            </summary>
            <param name="WhichAnimation"></param>
            <param name="HowManyAnimations"></param>
        </member>
        <member name="M:SpriteLibrary.Sprite.ChangeAnimation(System.Int32)">
            <summary>
            Start a new animation index from scratch
            </summary>
            <param name="WhichAnimation"></param>
        </member>
        <member name="M:SpriteLibrary.Sprite.ChangeAnimationSpeed(System.Int32,System.Int32)">
            <summary>
            Change the animation speed of a particular animation.  This looks at the first frame
            and compares that frame to the speed specified.  It adjusts all the animations by the
            same percentage.
            </summary>
            <param name="WhichAnimation">The integer representing the animation to change</param>
            <param name="newSpeed">The speed in milliseconds for the new animation</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.GetAnimationSpeed(System.Int32)">
            <summary>
            Return the animation speed of this particualar animation of the sprite.
            </summary>
            <param name="WhichAnimation"></param>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.ActuallyDraw">
            <summary>
            Actually draw the Sprite.  Never use this.  It is used by the SpriteController
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.PutBaseImageLocation(System.Drawing.Point)">
            <summary>
            Put the Sprite at a specified location, using the dimentions of the BackgroundImage.
            Unless you are using coordinates you have gotten from a mouse-click, this is how you want
            to place a Sprite somewhere.  It is the easiest way to track things.  But, if you are
            doing something using mouse-click coordinates, you want to use PutPictureBoxLocation
            </summary>
            <param name="NewLocationOnImage">The new point on the Image</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.PutBaseImageLocation(System.Double,System.Double)">
            <summary>
            Put the Sprite at a specified location, using the dimentions of the BackgroundImage.
            Unless you are using coordinates you have gotten from a mouse-click, this is how you want
            to place a Sprite somewhere.  It is the easiest way to track things.  But, if you are
            doing something using mouse-click coordinates, you want to use PutPictureBoxLocation
            </summary>
            <param name="X">The X location on the background image</param>
            <param name="Y">the Y location on the background image</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.PutPictureBoxLocation(System.Drawing.Point)">
            <summary>
            Put the Sprite at a specified location, using the dimentions of the PictureBox.
            You want to use this if you got your X/Y position from a mouse-click.  Otherwise,
            this is the harder way to track things, particularly if your window can resize.  Use
            PutBaseImageLocation instead.
            </summary>
            <param name="NewLocationOnPictureBox">A point on the PictureBox</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.RecalcPictureBoxLocation">
            <summary>
            Done when the box resizes.  We need to recompute the picturebox location.  The resize function
            automatically calls this.  You should never need to do so.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.Tick">
            <summary>
            This is run from the sprite controller every 10 miliseconds.  You should never
            need to call this yourself.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.SetSize(System.Drawing.Size)">
            <summary>
            Resize the sprite using the base image coordinates.  The width and height specified
            are relative to the size of the background image, not the picturebox.
            </summary>
            <param name="NewSize">The size (width, height) to make the sprite</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.Destroy">
            <summary>
            Tell the sprite to kill itself.  It will erase itself and then
            be removed from the spritelist.  Then it will be gone forever.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.HideSprite">
            <summary>
            Remove the sprite from the field.  This does not destroy the sprite.  It simply removes it from action
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.SpriteAtPictureBoxPoint(System.Drawing.Point,SpriteLibrary.SpriteCollisionMethod)">
            <summary>
            Return true or false, asking if the specifiec sprite is at the point on the picturebox.
            You can use this with a mouse-click to see if you are clicking on a sprite.  Use the 
            SpriteCollisionMethod "transparent" to see if you have clicked on an actual pixel of the 
            sprite instead of just within the sprite rectangle.
            </summary>
            <param name="location">The x and y location in ImageBox coordinates.</param>
            <param name="method">The method of determining if the sprite is at that position</param>
            <returns>True if the sprite is at the specified location, false if it is not</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.SpriteAdjustedPoint(System.Drawing.Point)">
            <summary>
            Because sprites are scaled (shrunk or stretched), this function finds the point
            within the sprite that is specified by the location.  this function is used by
            a number of internal processes, but may be useful to you.  But probably not.
            </summary>
            <param name="location">A point given in Image coordinates</param>
            <returns>A point within the pixel that can be used to find a particular pixel in a sprite.</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.SpriteAtImagePoint(System.Drawing.Point,SpriteLibrary.SpriteCollisionMethod)">
            <summary>
            Check to see if the sprite exists at the point specified.  The point given is
            in coordinates used by the image (not the PictureBox, use SpriteAtPictureBox for that)
            </summary>
            <param name="location">An imagebox location</param>
            <param name="method">the method to use to determine if the image is there</param>
            <returns>true if the sprite is at that position, false if it is not</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.GetImage">
            <summary>
            return the current image frame.  Warning:  If you write to this image, it will
            affect all sprites using this frame.
            </summary>
            <returns>An image that is the current sprite frame for the current animation</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.ReturnAdjustmentRatio">
            <summary>
            Taking into consideration how the sprite is stretched or shrunk, it
            returns a SpriteAdjustmentRatio that can be used to work with the sprite
            itself.
            </summary>
            <returns>The current SpriteAdjustmentRatio used to display this sprite</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.SpriteCanMoveOnPictureBox(System.Drawing.Point)">
            <summary>
            Return true if the sprite can go to this point and still be on the drawing-board.
            </summary>
            <param name="newpoint">The point, given in pixels and corresponding to pixels on the picturebox</param>
            <returns>true or false</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.SpriteCanMoveOnImage(System.Drawing.Point)">
            <summary>
            Return true if the sprite can go to this point and still be on the drawing-board.
            </summary>
            <param name="newpoint">The point, given in pixels and corresponding to pixels on the background image</param>
            <returns>true or false</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.MoveTo(System.Drawing.Point)">
            <summary>
            Tell the Sprite to move towards a destination.  You need to give the sprite a MovementSpeed
            and tell the sprite that it can automatically move.  But the sprite will begin a journey towards
            that point at the MovementSpeed you have set.  When it gets to the point, the SpriteArrivedAtEndPoint event
            will fire off.  Also, the SpriteReachedEnd bool will be true.
            </summary>
            <param name="Destination">An image-point that the sprite will move to.</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.MoveTo(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Tell the sprite to move towards each point in turn.  The sprite will move in a straight line until the first point.
            From there it moves to the next point, until it has reached the last point.  Every time it reaches a point, the
            SpriteArrivedAtWaypoint event is triggered.  When it reaches the final point in the list, the SpriteArrivedAtEndPoint
            event is triggered.  While the sprite is moving, the SpriteReachedEndPoint attribute is set to false.  When it has
            arrived, it is set to true.
            </summary>
            <param name="DestinationList">A list of Image-Points that the sprite will follow, one after the other</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.SetSpriteDirectionToPoint(System.Drawing.Point)">
            <summary>
            Sets the Sprite Moving towards a given point.  You are responsible to do something with it once it gets there.
            If you want it to automatically stop upon reaching it, use MoveTo instead.  Actually, the MoveTo function works
            a lot better than this one.  Because of integer rounding and a few other things, this function is a little
            bit imprecise.  If you send it towards a point, it will go in that general direction.  The MoveTo function
            will perpetually recalculate its way to the destination point and actually reach that point.  SetSpriteDirectionToPoint
            will sort-of head in the direction of the point.  But MoveTo will go to that point.
            </summary>
            <param name="ImagePointDestination"></param>
        </member>
        <member name="M:SpriteLibrary.Sprite.CancelMoveTo">
            <summary>
            Cancel a MoveTo command.  The sprite will stop moving, and all the waypoints will be removed.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.SetSpriteDirectionDegrees(System.Double)">
            <summary>
            Given a "degree" (from 0 to 360, set the direction
            that the sprite moves automatically.  0 is right, 90 is up, 180 is left
            and 270 is down.
            </summary>
            <param name="AngleInDegrees">the degrees to use</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.SetSpriteDirectionRadians(System.Double)">
            <summary>
            Set the sprite direction using Radians.  Most people do not want to use this.
            Use SetSpriteDirectionDegrees instead unless you like math and know what you
            are doing with Radians.
            </summary>
            <param name="AngleInRadians">The angle in radians</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.SetSpriteDirection(System.Windows.Vector)">
            <summary>
            Set the sprite direction using a vector.  The vector may contain
            a speed as well as the movement delta (amount of x shift, and amount
            of y shift.)  If so, this function may also affect the movement speed
            Most people prefer to use SetSpriteDirectionDegrees instead of using
            vectors.
            </summary>
            <param name="newVector">A vector</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.ConvertDegreesToRadians(System.Double)">
            <summary>
            Convert a number from degrees to radians.
            </summary>
            <param name="Degrees">The number from 0 to 360 in degrees</param>
            <returns>The corresponding number converted to radians</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.ConvertRadiansToDegrees(System.Double)">
            <summary>
            Convert a number from radians to degrees.
            </summary>
            <param name="Radians">The number of radians</param>
            <returns>The corresponding number in degrees</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.GetSpriteVector">
            <summary>
            Return the current vector that the sprite is moving along
            </summary>
            <returns>The current sprite vector</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.GetSpriteRadans">
            <summary>
            Returns the direction the sprite is currently traveling, using Radians.
            </summary>
            <returns>The direction in radians that the sprite is traveling in</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.GetSpriteDegrees">
            <summary>
            Get the direction that the sprite is traveling in in degrees.  You may want to
            use Math.Round on the results.  The value returned is usually just a tiny bit off
            from what you set it with.  For example, if you set the sprite movement direction
            to be 270 degrees (down), this function may return it as 269.999992.  Rounding the
            number will give it back to you at probably the same direction you set it as.
            </summary>
            <returns>A double (it has a decimal place) that represents the direction in degrees</returns>
        </member>
        <member name="M:SpriteLibrary.Sprite.CheckSpriteHitsSprite(SpriteLibrary.Sprite,SpriteLibrary.SpriteCollisionMethod)">
            <summary>
            Check to see if two sprites hit each-other.  The sprite collision methods are
            not all programmed in.
            </summary>
            <param name="target">The Sprite we are checking to see if we hit</param>
            <param name="how">The method we use to determine if they hit</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.NoteSpriteHitsSprite(SpriteLibrary.Sprite,SpriteLibrary.SpriteCollisionMethod)">
            <summary>
            This is used when two sprites hit each-other. 
            </summary>
            <param name="target">The sprite it hits</param>
            <param name="how">the method for checking</param>
        </member>
        <member name="M:SpriteLibrary.Sprite.SendToFront">
            <summary>
            Make the sprite show up in front of all other sprites.
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.SendToBack">
            <summary>
            Make the sprite go behind all other sprites
            </summary>
        </member>
        <member name="M:SpriteLibrary.Sprite.Pause(SpriteLibrary.SpritePauseType)">
            <summary>
            Pause the sprite.  We can pause just the animation (and still let it move), pause movement (and let it animate), or pause everything.
            </summary>
            <param name="What"></param>
        </member>
        <member name="M:SpriteLibrary.Sprite.UnPause(SpriteLibrary.SpritePauseType)">
            <summary>
            unpause the sprite.
            </summary>
            <param name="What"></param>
        </member>
        <member name="M:SpriteLibrary.Sprite.IsPaused(SpriteLibrary.SpritePauseType)">
            <summary>
            Ask if the sprite is paused using the specified sprite type (default is PauseAll)
            </summary>
            <param name="What">The spritePauseType to see if the sprite is paused with</param>
            <returns>True if the sprite is set to pause the specified item, false if not</returns>
        </member>
        <member name="T:SpriteLibrary.SpriteCollisionMethod">
            <summary>
            The various types of collisions a sprite can have.  Currently only rectangle works
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteCollisionMethod.rectangle">
            <summary>
            Checks if the two rectangles that contain the sprites overlap
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteCollisionMethod.circle">
            <summary>
            Draws a circle (ellipse) inside the sprite rectangles and see if those ellipses overlap
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteCollisionMethod.transparency">
            <summary>
            Check to see if nontransparent portions of a sprite collide.  Not working.
            </summary>
        </member>
        <member name="T:SpriteLibrary.SpriteAdjustmentRatio">
            <summary>
            A structure that contains the width and height adjustment ratio.
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteAdjustmentRatio.width_ratio">
            <summary>
            Divide a picturebox ratio by this to get the image location.  Multiply an image location by this to get the picturebox location.
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpriteAdjustmentRatio.height_ratio">
            <summary>
            Divide a picturebox ratio by this to get the image location.  Multiply an image location by this to get the picturebox location.
            </summary>
        </member>
        <member name="T:SpriteLibrary.SpritePauseType">
            <summary>
            The type of pause signals you can give a sprite or the sprite controller
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpritePauseType.PauseAnimation">
            <summary>
            Pause the animating.  Animation resumes from the current frame when we unpause
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpritePauseType.PauseMovement">
            <summary>
            Pause any automatic movement.  Movement resumes where it was left off if you unpause 
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpritePauseType.PauseEvents">
            <summary>
            Pause events. Sprite collisions, movement checks, etc are stopped until the unpause
            </summary>
        </member>
        <member name="F:SpriteLibrary.SpritePauseType.PauseAll">
            <summary>
            All pausable things are paused.
            </summary>
        </member>
        <member name="T:SpriteLibrary.SpriteController">
            <summary>
            A sprite controller is the main heart of the sprite class.  It controls animations and
            can help you check for key-presses.  To make a sprite controller, you need to have one
            defined for your main form:
            SpriteController MySpriteController;
            
            And then, when the form is created, after the InitializeComponents() function, you
            need to configure the drawing area and create the sprite controller:
            MainDrawingArea.BackgroundImage = Properties.Resources.Background;
            MainDrawingArea.BackgroundImageLayout = ImageLayout.Stretch;
            MySpriteController = new SpriteController(MainDrawingArea);
            In this case, MainDrawingArea is the picturebox where all the sprites will be displayed.
            </summary>
        </member>
        <member name="P:SpriteLibrary.SpriteController.SpriteCount">
            <summary>
            The count of all the sprites the controller knows about.  This includes named 
            sprites, which may not be visible
            </summary>
        </member>
        <member name="M:SpriteLibrary.SpriteController.#ctor(System.Windows.Forms.PictureBox)">
            <summary>
            Create a sprite controller, specifying the picturebox on which the sprites
            will be displayed.
            </summary>
            <param name="Area">The picturebox that the sprites will be drawn in</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.#ctor(System.Windows.Forms.PictureBox,System.EventHandler)">
            <summary>
            Create a sprite controller, specifying the picturebox on which the sprites
            will be displayed.
            </summary>
            <param name="Area">The picturebox that the sprites will be drawn in</param>
            <param name="TimerTickMethod">A function on the form that you want to have run every tick</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.Local_Setup">
            <summary>
            Define some things and set up some things that need defining at instantiation
            </summary>
        </member>
        <member name="M:SpriteLibrary.SpriteController.MouseClickOnBox(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This is what happens when someone clicks on the PictureBox.  We want to pass any Click events to the Sprite
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReplaceOriginalImage(System.Drawing.Image)">
            <summary>
            Replace the image on which the sprites are drawn.  Use this when you move to a new playing field, 
            or want to have a different background
            </summary>
            <param name="tImage">The new image that all sprites will be drawn on</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReplaceOriginalImage">
            <summary>
            Notify the sprite controller that you have changed the background image on the
            PictureBox.  Whatever background is on the picturebox is now used to draw all the sprites on.
            </summary>
        </member>
        <member name="M:SpriteLibrary.SpriteController.TimerTick(System.Object,System.EventArgs)">
            <summary>
            The function called by the timer every 10 millisecods  We also call do_tick, which
            is the function defined by the user.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:SpriteLibrary.SpriteController.DoTick">
            <summary>
            Define a stub for an event handler that the programmer can define if they want to run
            something on the tick, along with the sprite animations.
            </summary>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ProcessImageResize(System.Object,System.EventArgs)">
            <summary>
            Process a form resize by recalculating all the picturebox locations for all sprites.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.CountSpritesBasedOff(System.String)">
            <summary>
            Count the number of sprites that were duplicated from the sprite with the specified name
            </summary>
            <param name="Name">The name to look for</param>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.AllSprites">
            <summary>
            Return a list of all sprites
            </summary>
            <returns>A list of all sprites</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpritesBasedOff(System.String)">
            <summary>
            Return all sprites that were based off a particular sprite name
            </summary>
            <param name="SpriteName">The sprite name to find</param>
            <returns>A list of sprites that were based off the named sprite</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpritesThatHaveBeenDrawn">
            <summary>
            Return a list of all sprites which have been drawn on the image
            </summary>
            <returns>A list of sprites that have been drawn</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpritesBasedOffAnything">
            <summary>
            Return a list of all sprites which are not master sprites (have been based off something)
            </summary>
            <returns>A list of sprites</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReturnAdjustmentRatio">
            <summary>
            Return an adjustment ratio.  This is the image-size to picture-box ratio.
            It is used for calculating precise pixels or picture-box locations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReturnPointAdjustedForImage(System.Drawing.Point)">
            <summary>
            This takes a point, the location on a picturebox, and returns the corresponding point on the BackgroundImage.
            </summary>
            <param name="LocationOnPicturebox">A point on the picturebox that you want the corresponding image pixel location for.</param>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReturnPictureBoxAdjustedHeight(System.Int32)">
            <summary>
            Return the height of an object in picture-box terms.  It is basically the virtual height
            of the sprite or other item.
            </summary>
            <param name="Height">The image-box heigh (or sprite height)</param>
            <returns>An integer that corresponds to the hight as displayed in the picturebox</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReturnPictureBoxAdjustedWidth(System.Int32)">
            <summary>
            Return the width of an object in picture-box terms.  It takes the width of a sprite or other
            item that is being displayed on the screen, and calculates the width as displayed in the
            picture-box (taking into consideration stretching or shrinking)
            </summary>
            <param name="Width">An integer width of the drawn item</param>
            <returns>An integer that contains the number of pixels wide it is on the picturebox</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.ReturnPictureBoxAdjustedPoint(System.Drawing.Point)">
            <summary>
            This does the reverse of an adjusted point.  It takes a point on the image and 
            transforms it to one on the PictureBox
            </summary>
            <param name="LocationOnImage">A point on the image, using the x and y pixels on the image</param>
            <returns>A location that can be used on the picture-box, taking into consideration the image being stretched.</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.AdjustRectangle(System.Drawing.Rectangle)">
            <summary>
            Adjust a rectangle that is based on the image, according to the stretch of the picturebox
            </summary>
            <param name="ImageRectangle">A rectangle using coordinates from the image</param>
            <returns>a rectangle that is adjusted for the PictureBox</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.AdjustPoint(System.Drawing.Point)">
            <summary>
            Adjust an image point so that it conforms to the picturebox.
            </summary>
            <param name="LocationOnImage">The image location</param>
            <returns>the corresponding point on the PictuerBox</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidate a rectangle that is specified in image coordinates
            </summary>
            <param name="ImageRectangle">A rectangle based on the image coordinates</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.Invalidate">
            <summary>
            Invalidate the entire image on which the sprites are drawn
            </summary>
        </member>
        <member name="P:SpriteLibrary.SpriteController.BackgroundImage">
            <summary>
            The Background Image on which the sprites are drawn.  This image ends up having
            sprite parts on it. The OriginalImage is the version that is clean.  Use
            ReplaceOriginalImage to replace the background Image.
            </summary>
        </member>
        <member name="P:SpriteLibrary.SpriteController.OriginalImage">
            <summary>
            The Image from which the background is taken when we erase sprites.  The BackgroundImage
            is the image that contains images of the sprites as well as the background image.  Use
            ReplaceOriginalImage to replace this and the BackgroundImage.
            </summary>
        </member>
        <member name="M:SpriteLibrary.SpriteController.DuplicateSprite(SpriteLibrary.Sprite)">
            <summary>
            Make a duplicate of the specified sprite.  The duplicate does not yet have a location.
            </summary>
            <param name="What">The sprite to duplicate</param>
            <returns>A new sprite.  If What is null, returns null</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.DuplicateSprite(System.String)">
            <summary>
            Find a sprite that has been named with the specified name.  Then duplicate that sprite
            </summary>
            <param name="Name">The name of a sprite</param>
            <returns>A duplicate of the specified sprite.  It has no location, and does not retain the sprite name.</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpriteFromName(System.String)">
            <summary>
            Find a sprite that has a specified name.  This returns the actual sprite with that name.
            You usually want to use DuplicateSprite(Name) to clone the sprite and get one you can
            destroy.  If you destroy a named sprite without duplicating it, you may end up losing
            it for the remainder of the program.
            </summary>
            <param name="Name">A string that matches something added to a sprite with Sprite.SetName</param>
            <returns>A sprite that has the specified name, or null if no such sprite exists.</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.AddSprite(SpriteLibrary.Sprite)">
            <summary>
            Add the specified sprite to the list of sprites we know about.  You usually do not need to do this.
            Sprites add themselves to the controller when you create a new sprite.
            </summary>
            <param name="tSprite"></param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.DestroySprite(SpriteLibrary.Sprite)">
            <summary>
            Tell a sprite to destroy itself.  The sprite will have Destroying property set to true from
            the time you destroy it until it vanishes.  Whe you destroy a sprite, it will erase itself 
            and remove itself from the controller.  After it is destroyed, it is completely gone.
            </summary>
            <param name="what">The Sprite to destroy</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.NameSprite(SpriteLibrary.Sprite,System.String)">
            <summary>
            Find the specified Sprite in the controller and change its name to the specified string.
            You can do the same thing with Sprite.SetName(Name)
            </summary>
            <param name="What">The Sprite to find</param>
            <param name="Name">The string to change the name to</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpritesAtPoint(System.Drawing.Point)">
            <summary>
            This takes a point, as given by the mouse-click args, and returns the sprites at that point.
            </summary>
            <param name="Location">The point being clicked on</param>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpritesAtImagePoint(System.Drawing.Point)">
            <summary>
            This takes a point, as as specified on the image, and returns the sprites at that point.
            </summary>
            <param name="Location">The point being looked at</param>
            <returns></returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.IsKeyPressed">
            <summary>
            Check to see if any keys are pressed.
            </summary>
            <returns>True if a key is pressed, false if no keys are pressed.</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Check to see if the given key is pressed.
            </summary>
            <param name="k">The key to check to see if it is pressed</param>
            <returns>True if the key is pressed, false if that key is not pressed</returns>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpriteToFront(SpriteLibrary.Sprite)">
            <summary>
            Change the display order of the specified sprite so it goes in front of all other sprites.
            </summary>
            <param name="What">The sprite we want to show up in front</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpriteToBack(SpriteLibrary.Sprite)">
            <summary>
            Change the display order of the specified sprite so it goes behind all other sprites.
            </summary>
            <param name="What">The sprite to send behind all other sprites</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpriteBackwards(SpriteLibrary.Sprite)">
            <summary>
            Change the display order of the specified sprite so it is more likely to go behind all other sprites.
            </summary>
            <param name="What">The sprite to send behind all other sprites</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SpriteForwards(SpriteLibrary.Sprite)">
            <summary>
            Change the display order of the specified sprite so it is more likely to go in front of other sprites
            </summary>
            <param name="What">The sprite to send behind all other sprites</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.PlaceSpriteBehind(SpriteLibrary.Sprite,SpriteLibrary.Sprite)">
            <summary>
            Change the display order of the sprites such that the specified sprite appears behind the other sprite.
            </summary>
            <param name="WhatToSend">The sprite we are changing the display order of</param>
            <param name="ToGoBehind">The sprite we want to go behind</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.PlaceSpriteInFrontOf(SpriteLibrary.Sprite,SpriteLibrary.Sprite)">
            <summary>
            Make the sprite go in front of the specified sprite.
            </summary>
            <param name="WhatToSend">The sprite to change the display order of</param>
            <param name="ToGoInFrontOf">The sprite we want to make sure we display in front of</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SoundPlay(System.IO.Stream,System.String)">
            <summary>
            Play a sound that we can check to see if it has completed.
            </summary>
            <param name="ToPlay">The sound to play</param>
            <param name="Name">The name, which we can use to determine if it has finished.</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.PlayAsync(System.IO.Stream,System.String,System.EventHandler)">
            <summary>
            Play a sound bit in a separate thread.  When the thread is done, set a bool saying that
            </summary>
            <param name="ToPlay">The sound to play</param>
            <param name="RegisterName">The string that we can use to track the status of the sound</param>
            <param name="WhenDone">A function that gets called when the sound is complete</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.SoundIsFinished(System.String)">
            <summary>
            Check to see if the specified sound has finished playing
            </summary>
            <param name="Name">The name of the sound</param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.Pause(SpriteLibrary.SpritePauseType)">
            <summary>
            Pause everything
            </summary>
            <param name="What"></param>
        </member>
        <member name="M:SpriteLibrary.SpriteController.UnPause(SpriteLibrary.SpritePauseType)">
            <summary>
            un-Pause everything
            </summary>
            <param name="What"></param>
        </member>
        <member name="T:SpriteLibrary.SpritePayload">
            <summary>
            The SpritePayload is a stub of a class.  Basically, you want to "override" this class.  You do this by making your
            own class that looks something like:  public class TankPayload : SpritePayload { public int Armor=20; public int FireTime = 100; }
            And then you add that to your sprite:  TankSprite.Payload = new TankPayload();  If there is no payload, then the payload 
            property is null.  If you have multiple types of SpritePayloads, you may need to do something like: if(TankSprite.payload != null and 
            TankSprite.payload is TankPayload) { TankPayload tPayload = (TankPayload)TankSprite.payload; tPayload.Armor--; }
            </summary>
        </member>
    </members>
</doc>
